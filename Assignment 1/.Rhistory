print(sample_sd)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
cat("Probability (Sample 100):", prob_sample_100, "\n")
cat("Probability (Sample 100k):", prob_sample_100k, "\n")
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
diabetes <- read.csv("diabetes.csv")
chol = diabetes$chol
qqnorm(chol)
hist(chol)
boxplot(chol)
```
vlbw <- read.csv("vlbw.csv")
bwt = vlbw$bwt
qqnorm(bwt)
hist(bwt)
boxplot(bwt)
vlbw <- read.csv("vlbw.csv")
bwt = vlbw$bwt
qqnorm(bwt)
hist(bwt)
boxplot(bwt)
diabetes <- read.csv("diabetes.csv")
chol = diabetes$chol
qqnorm(chol)
hist(chol)
boxplot(chol)
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
library(ggplot2)
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
xValue = 1:100
yValue = meandiff
plot(meandiff,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
vlbw <- read.csv("vlbw.csv")
bwt = vlbw$bwt
qqnorm(bwt)
hist(bwt)
boxplot(bwt)
```
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, col = "red", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "red", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
lines(y = 1.9444, type = "l", col = "red")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(y = 1.9444, type = "l", col = "red")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(y = 1.9444, col = "red")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(h = 1.9444, col = "red")
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(h = 1.9444, col = "red", lwd = 2)
legend(1, 95, legend=c("expected value of the absolute difference", "Measured value of the absolute difference"),
col=c("red", "blue"), lty=1:2, cex=0.8)
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(h = 1.9444, col = "red", lwd = 2)
legend("topright", legend=c("expected value of the absolute difference", "Measured value of the absolute difference"),
col=c("red", "blue"), lty=1:2, cex=0.8)
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2")
abline(h = 1.9444, col = "red", lwd = 2)
legend("topright", legend=c("expected value of the absolute difference", "Measured value of the absolute difference"),
col=c("red", "blue"), lty=1, cex=0.8)
```{r message=FALSE, warning=FALSE}
source("function02.txt")
meandiff = numeric(n)
for (i in 1:1000){
meandiff[i] = mean(diffdice(i))
}
plot(meandiff, type = 'l', col = "blue", xlab = "Number of Comparisons", ylab = "Mean Difference",
main = "Mean difference of 2 dice")
abline(h = 1.9444, col = "red", lwd = 2)
legend("topright", legend=c("Expected value of the absolute difference", "Measured value of the absolute difference"),
col=c("red", "blue"), lty=1, cex=0.8)
source("function02.txt")
expectation = mean(diffdice(i))
print(expectatio
source("function02.txt")
source("function02.txt")
expectation = mean(diffdice(i))
print(expectation)
source("function02.txt")
expectation = mean(diffdice(i))
print(expectation)
source("function02.txt")
expectation = mean(diffdice(i))
print(expectation)
source("function02.txt")
expectation = mean(diffdice(i))
print(expectation)
source("function02.txt")
expectation = mean(diffdice(100000))
print(expectation)
source("function02.txt")
expectation = mean(diffdice(100000))
print(expectation)
source("function02.txt")
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k = 3)))
source("function02.txt")
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k == 3)))
source("function02.txt")
n = 100000
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k == 3))/n)
source("function02.txt")
n = 100000
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k == 3))/n)
source("function02.txt")
n = 100000
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k == 3))/n)
source("function02.txt")
n = 100000
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
print(length(which(Diffs100k == 3))/n)
source("function02.txt")
n = 100000
Diffs100k = diffdice(100000)
expectation = mean(Diffs100k)
print(expectation)
probabiliy_of_3 = length(which(Diffs100k == 3))/n
print(probabiliy_of_3)
source("function02.txt")
n = 100000
Diffs100k = diffdice(n)
expectation = mean(Diffs100k)
print(expectation)
expectation = 0
for (i in 0 : 6){
probability_of_i = length(which(Diffs100k == i))/n
expectation = expectation + (probability_of_i*i)
}
expectation = expectation/n
print(expectation)
probability_of_3 = length(which(Diffs100k == 3))/n
print(probabiliy_of_3)
source("function02.txt")
n = 100000
Diffs100k = diffdice(n)
expectation = mean(Diffs100k)
print(expectation)
expectation = 0
for (i in 0 : 6){
probability_of_i = length(which(Diffs100k == i))/n
expectation = expectation + (probability_of_i*i)
}
expectation = expectation/n
print(expectation)
probability_of_3 = length(which(Diffs100k == 3))
print(probabiliy_of_3)
n = 100000
Diffs100k = diffdice(n)
expectation = mean(Diffs100k)
print(expectation)
expectation = 0
for (i in 0 : 6){
probability_of_i = length(which(Diffs100k == i))/n
expectation = expectation + (probability_of_i*i)
}
expectation = expectation
print(expectation)
probability_of_3 = length(which(Diffs100k == 3))/n
print(probabiliy_of_3)
source("function02.txt")
n = 100000
Diffs100k = diffdice(n)
expectation = mean(Diffs100k)
print(expectation)
expectation = 0
for (i in 0 : 6){
probability_of_i = length(which(Diffs100k == i))/n
expectation = expectation + (probability_of_i*i)
}
expectation = expectation
print(expectation)
probability_of_3 = length(which(Diffs100k == 3))/n
print(probabiliy_of_3)
source("function02.txt")
n = 100000
Diffs100k = diffdice(n)
expectation = mean(Diffs100k)
print(expectation)
expectation = 0
for (i in 0 : 6){
probability_of_i = length(which(Diffs100k == i))/n
expectation = expectation + (probability_of_i*i)
}
expectation = expectation
print(expectation)
probability_of_3 = length(which(Diffs100k == 3))/n
print(probabiliy_of_3)
source("function02.txt")
par(mfrow = x(1,4))
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
hist(values)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
hist(values)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
hist(values)
xfit <- seq(min(values), max(values), length = 1000)
yfit <- dnorm(xfit, mean = 1.9444, sd = 1.4326)
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
h <- hist(values)
xfit <- seq(min(values), max(values), length = 1000)
yfit <- dnorm(xfit, mean = 1.9444, sd = 1.4326)
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
h <- hist(values)
xfit <- seq(min(values), max(values), length = 1000)
yfit <- dnorm(xfit, mean = 1.9444, sd = 1.4326)
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
h <- hist(values)
xfit <- seq(min(values), max(values), length = 10)
yfit <- dnorm(xfit, mean = 1.9444, sd = 1.4326)
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
source("function02.txt")
par(mfrow = c(1,4))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
h <- hist(values)
xfit <- seq(min(values), max(values), length = 1000)
yfit <- dnorm(xfit, mean = 1.9444, sd = sqrt(((1.4326)^2)/n))
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
cat("Probability (Sample 100):", prob_sample_100, "\n")
cat("Probability (Sample 100k):", prob_sample_100k, "\n")
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
set.seed(123)
cn = 115
cdf=2
ci = sequence(cn)
cx = rchisq(ci, df=cdf)
qqnorm(cx)
abline(0, 1, col = 'red')
text(2, 2.25, "y = x")
hist(cx)
boxplot(cx)
tn = 105
tdf=4
ti = sequence(tn)
tx = rt(ti, df=tdf)
qqnorm(tx)
abline(0, 1, col = 'red')
text(2, 2.25, "y = x")
hist(tx)
boxplot(tx)
source("function02.txt")
par(mfrow = c(2,2))
CLTGenerator = function(n = 1, sample_means = 1000){
values = numeric(sample_means)
for (i in 1:sample_means){
values[i] = mean(diffdice(n))
}
h <- hist(values)
xfit <- seq(min(values), max(values), length = 1000)
yfit <- dnorm(xfit, mean = 1.9444, sd = sqrt(((1.4326)^2)/n))
yfit <- yfit * diff(h$mids[1:2]) * length(values)
lines(xfit, yfit, col = "black", lwd = 2)
}
CLTGenerator(n = 1)
CLTGenerator(n = 8)
CLTGenerator(n = 64)
CLTGenerator(n = 256)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print("Probability (Sample 100):", prob_sample_100, "\n")
print("Probability (Sample 100k):", prob_sample_100k, "\n")
}
verification_function(max = 3)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print("Probability (Sample 100):", prob_sample_100)
print("Probability (Sample 100k):", prob_sample_100k)
}
verification_function(max = 3)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print(cat("Probability (Sample 100):", prob_sample_100))
print(cat("Probability (Sample 100k):", prob_sample_100k))
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print(cat("Probability (Sample 100):", prob_sample_100,"\n"))
print(cat("Probability (Sample 100k):", prob_sample_100k))
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print(cat("Probability (Sample 100):", prob_sample_100, collapse = NULL))
print(cat("Probability (Sample 100k):", prob_sample_100k))
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
verification_function <- function(min = -Inf, max = Inf){
sample_100 = rnorm(100)
sample_100k = rnorm(100000)
prob_sample_100 = mean(sample_100 > min & sample_100 < max)
prob_sample_100k = mean(sample_100k > min & sample_100k < max)
print(cat("Probability (Sample 100):", prob_sample_100, collapse = ""))
print(cat("Probability (Sample 100k):", prob_sample_100k))
}
verification_function(max = 3)
verification_function(min = -0.5)
verification_function(min = -1, max = 2)
chi_n = 115
chi_df = 2
chi_x = rchisq(sequence(chi_n), df=chi_df)
chi_n = 115
chi_n = 115
chi_df = 2
chi_x = rchisq(sequence(chi_n), df=chi_df)
```
chi_n = 115
chi_df = 2
chi_x = rchisq(sequence(chi_n), df=chi_df)
#```
#```{r message=FALSE, warning=FALSE, echo = FALSE}
par(mfrow = c(1,1))
plot(x = chi_x, y = sequence(chi_n)
chi_n = 115
chi_n = 115
chi_df = 2
chi_x = rchisq(sequence(chi_n), df=chi_df)
#```
#```{r message=FALSE, warning=FALSE, echo = FALSE}
par(mfrow = c(1,1))
plot(x = chi_x, y = sequence(chi_n))
